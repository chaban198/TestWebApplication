// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaskListWebApplication.Data;

#nullable disable

namespace TaskListWebApplication.Migrations
{
    [DbContext(typeof(TaskListApplicationDbContext))]
    [Migration("20231019193502_navFixes")]
    partial class navFixes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "user_task_status", new[] { "open", "in_review", "in_test", "approved", "merged", "cancelled" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TaskListWebApplication.Models.DbModels.ProjectDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<List<string>>("Users")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("users");

                    b.HasKey("Id");

                    b.ToTable("projects");
                });

            modelBuilder.Entity("TaskListWebApplication.Models.DbModels.SprintDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("End")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end");

                    b.Property<List<string>>("Files")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("files");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("projectId");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("sprints");
                });

            modelBuilder.Entity("TaskListWebApplication.Models.DbModels.TaskDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("SprintId")
                        .HasColumnType("uuid")
                        .HasColumnName("sprintId");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("User")
                        .HasColumnType("text")
                        .HasColumnName("user");

                    b.HasKey("Id");

                    b.HasIndex("SprintId");

                    b.ToTable("tasks");
                });

            modelBuilder.Entity("TaskListWebApplication.Models.DbModels.SprintDb", b =>
                {
                    b.HasOne("TaskListWebApplication.Models.DbModels.ProjectDb", "Project")
                        .WithMany("Posts")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TaskListWebApplication.Models.DbModels.TaskDb", b =>
                {
                    b.HasOne("TaskListWebApplication.Models.DbModels.SprintDb", "Sprint")
                        .WithMany("Tasks")
                        .HasForeignKey("SprintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sprint");
                });

            modelBuilder.Entity("TaskListWebApplication.Models.DbModels.ProjectDb", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("TaskListWebApplication.Models.DbModels.SprintDb", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
